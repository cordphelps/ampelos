}
bugNames <- function(df) {
#column names to be ignored
ignore <- c("transect", "row", "position",
"date", "time", "julian", "week",
"positionX")
df[ignore] <- NULL
return(as.list(colnames(df)))
}
bigTable <- function(df) {
# https://rdrr.io/cran/dplyr/man/summarise_all.html
# https://stackoverflow.com/questions/9723208/aggregate-summarize-multiple-variables-per-group-e-g-sum-mean
#library(tidyverse)
#library(knitr)
#library("kableExtra")
# protect dyply function select()
# https://stackoverflow.com/questions/35839408/r-dplyr-drop-multiple-columns
#detach( "package:MASS", unload = TRUE )
#detach( "package:skimr", unload = TRUE )
# get loaded packages with sessionInfo()
list <- as.character(bugNames(df))
charVector <- as.character(c("sum", "max"))
df2 <- df  %>% summarise_at(list, funs(sum, max))
# https://stackoverflow.com/questions/35839408/r-dplyr-drop-multiple-columns
#iris %>% select(-one_of(drop.cols))
return(df2)
}
library(ggplot2)
library(ggridges)
#library(gridExtra)
source.url <- c("https://raw.githubusercontent.com/cordphelps/ampelos/master/bugs.csv")
bugs.df <- read.csv(source.url, header=TRUE, row.names=NULL)
speciesList <- c("spider")
total <- bugCount()
print(total)
speciesList <- c("spider")
plotRidges(data="bugs.df", bugs=speciesList, where="oakMargin", when="pm", wk=1, caption=Sys.Date())
View(bugs.df)
plotRidges(data=as.dataframe(bugs.df), bugs=speciesList, where="oakMargin", when="pm", wk=1, caption=Sys.Date())
?read.csv
library(ggplot2)
library(ggridges)
#library(gridExtra)
source.url <- c("https://raw.githubusercontent.com/cordphelps/ampelos/master/bugs.csv")
bugs.df <- read.csv(source.url, header=TRUE, row.names=NULL)
speciesList <- c("spider")
plotRidges(data=bugs.df, bugs=speciesList, where="oakMargin", when="pm", wk=1, caption=Sys.Date())
plotRidges <- function(data, bugs, where, when, wk, caption) {
# https://cran.r-project.org/web/packages/ggridges/vignettes/introduction.html
print(paste("inside; data= ", colnames(data), sep="\n"))
if (wk < 23 | wk > 52) {  # we definitely don't have a valid week
# this case indicates 'use data from all weeks'
cumulative <- "cumulative"
if (when != "am" & when != "pm") {    # use all the data (am and pm) for each day
filteredBugs.df <- filter(data, transect== where)
} else {                              # use partial data (am or pm) for each day
filteredBugs.df <- filter(data, transect== where & time== when)
}
} else {  #  we might have a 'valid' week (data for the specified week could be
#  missing....)
cumulative <- as.character(wk)
if (when != "am" & when != "pm") {   # use all the data (am and pm) for each day
filteredBugs.df <- filter(data, transect== where & week== wk)
} else {                             # use partial data (am or pm) for each day
filteredBugs.df <- filter(data, transect== where & time== when & week== wk)
}
}
# simplify to include the trap position and the bug in the list
newBugs.df <- subset(filteredBugs.df, select= c("positionX", bugs))
spider_rows <- count(newBugs.df)
trapsWithSpiders <- count(add_count(newBugs.df) %>% filter(spider>0))
percentOcurrance <- (trapsWithSpiders / spider_rows) * 100
# https://stackoverflow.com/questions/3443687/formatting-decimal-places-in-r
percentOcurrance <- format(round(percentOcurrance, 2), nsmall = 2)
spider.list <- newBugs.df$spider   #
newBugs.df$spider <- NULL
#newBugs.df$position <- as.character(position.list)
newBugs.df$spider <- as.factor(spider.list)
#Density plots can be thought of as plots of smoothed histograms.
#The smoothness is controlled by a bandwidth parameter that is analogous
#to the histogram binwidth.
#Most density plots use a kernel density estimate, but there are other
#possible strategies; qualitatively the particular strategy rarely matters.
# https://homepage.divms.uiowa.edu/~luke/classes/STAT4580/histdens.html
#gg2 <- ggplot(newBugs.df,aes(x=positionX, y=spider, fill=spider))+
gg2 <- ggplot(newBugs.df, aes_string(x="positionX", y=bugs[1], fill=bugs[1])) +
geom_density_ridges(
#aes(point_color = spider, point_fill=spider, point_shape=spider),
# https://stackoverflow.com/questions/22309285/how-to-use-a-variable-to-specify-column-name-in-ggplot
aes_string(point_color = bugs[1], point_fill=bugs[1], point_shape=bugs[1]),
alpha = .2, jittered_points = TRUE, show.legend=F) +
scale_point_color_hue(l = 40)  +
scale_discrete_manual(aesthetics = "point_shape", values = c(21, 22, 23, 24, 25)) +
#stat_density_ridges(quantile_lines = TRUE, quantiles = 2, alpha = .2, jittered_points = TRUE) +
xlim(1,10) +
# http://ggplot2.tidyverse.org/reference/sec_axis.html
scale_x_continuous(breaks=seq(4,200,16),
sec.axis = sec_axis(~.*.3048,
breaks= seq(0, 80, 10),
name= "trap distance from row start (m)"))  +
labs(title= paste("Apparent Probability Density, ",
"transect: ", where, sep=""),
subtitle = paste("week: ", cumulative, ", collection time: ", when,
"\ntraps with ", bugs[1], "s: ", percentOcurrance, " %",
sep=""),
x="trap distance from row start (ft)",
y= paste(bugs[1], " counts\nper trap", sep=""),
#caption="10 June 2018")
caption=paste(caption,
"\nhttps://en.wikipedia.org/wiki/Kernel_density_estimation",
sep="")) +
theme(panel.grid.minor=element_blank()) +  # hide the minor gridlines
theme(axis.title.y = element_text(angle = 0, vjust=.5))
# grid.arrange(gg1, gg2, ncol=1, nrow=2)
# ggsave("joy1.png", height=8, width=8, dpi=120, type="cairo-png")
return(gg2)
}
library(ggplot2)
library(ggridges)
#library(gridExtra)
source.url <- c("https://raw.githubusercontent.com/cordphelps/ampelos/master/bugs.csv")
bugs.df <- read.csv(source.url, header=TRUE, row.names=NULL)
speciesList <- c("spider")
plotRidges(data=bugs.df, bugs=speciesList, where="oakMargin", when="pm", wk=1, caption=Sys.Date())
plotRidges <- function(data, bugs, where, when, wk, caption) {
# https://cran.r-project.org/web/packages/ggridges/vignettes/introduction.html
print(paste("inside; data= ", colnames(data), sep="\n"))
if (wk < 23 | wk > 52) {  # we definitely don't have a valid week
# this case indicates 'use data from all weeks'
cumulative <- "cumulative"
if (when != "am" & when != "pm") {    # use all the data (am and pm) for each day
filteredBugs.df <- filter(data, transect == where)
} else {                              # use partial data (am or pm) for each day
filteredBugs.df <- filter(data, transect == where & time == when)
}
} else {  #  we might have a 'valid' week (data for the specified week could be
#  missing....)
cumulative <- as.character(wk)
if (when != "am" & when != "pm") {   # use all the data (am and pm) for each day
filteredBugs.df <- filter(data, transect == where & week == wk)
} else {                             # use partial data (am or pm) for each day
filteredBugs.df <- filter(data, transect == where & time == when & week == wk)
}
}
# simplify to include the trap position and the bug in the list
newBugs.df <- subset(filteredBugs.df, select= c("positionX", bugs))
spider_rows <- count(newBugs.df)
trapsWithSpiders <- count(add_count(newBugs.df) %>% filter(spider>0))
percentOcurrance <- (trapsWithSpiders / spider_rows) * 100
# https://stackoverflow.com/questions/3443687/formatting-decimal-places-in-r
percentOcurrance <- format(round(percentOcurrance, 2), nsmall = 2)
spider.list <- newBugs.df$spider   #
newBugs.df$spider <- NULL
#newBugs.df$position <- as.character(position.list)
newBugs.df$spider <- as.factor(spider.list)
#Density plots can be thought of as plots of smoothed histograms.
#The smoothness is controlled by a bandwidth parameter that is analogous
#to the histogram binwidth.
#Most density plots use a kernel density estimate, but there are other
#possible strategies; qualitatively the particular strategy rarely matters.
# https://homepage.divms.uiowa.edu/~luke/classes/STAT4580/histdens.html
#gg2 <- ggplot(newBugs.df,aes(x=positionX, y=spider, fill=spider))+
gg2 <- ggplot(newBugs.df, aes_string(x="positionX", y=bugs[1], fill=bugs[1])) +
geom_density_ridges(
#aes(point_color = spider, point_fill=spider, point_shape=spider),
# https://stackoverflow.com/questions/22309285/how-to-use-a-variable-to-specify-column-name-in-ggplot
aes_string(point_color = bugs[1], point_fill=bugs[1], point_shape=bugs[1]),
alpha = .2, jittered_points = TRUE, show.legend=F) +
scale_point_color_hue(l = 40)  +
scale_discrete_manual(aesthetics = "point_shape", values = c(21, 22, 23, 24, 25)) +
#stat_density_ridges(quantile_lines = TRUE, quantiles = 2, alpha = .2, jittered_points = TRUE) +
xlim(1,10) +
# http://ggplot2.tidyverse.org/reference/sec_axis.html
scale_x_continuous(breaks=seq(4,200,16),
sec.axis = sec_axis(~.*.3048,
breaks= seq(0, 80, 10),
name= "trap distance from row start (m)"))  +
labs(title= paste("Apparent Probability Density, ",
"transect: ", where, sep=""),
subtitle = paste("week: ", cumulative, ", collection time: ", when,
"\ntraps with ", bugs[1], "s: ", percentOcurrance, " %",
sep=""),
x="trap distance from row start (ft)",
y= paste(bugs[1], " counts\nper trap", sep=""),
#caption="10 June 2018")
caption=paste(caption,
"\nhttps://en.wikipedia.org/wiki/Kernel_density_estimation",
sep="")) +
theme(panel.grid.minor=element_blank()) +  # hide the minor gridlines
theme(axis.title.y = element_text(angle = 0, vjust=.5))
# grid.arrange(gg1, gg2, ncol=1, nrow=2)
# ggsave("joy1.png", height=8, width=8, dpi=120, type="cairo-png")
return(gg2)
}
library(ggplot2)
library(ggridges)
#library(gridExtra)
source.url <- c("https://raw.githubusercontent.com/cordphelps/ampelos/master/bugs.csv")
bugs.df <- read.csv(source.url, header=TRUE, row.names=NULL)
speciesList <- c("spider")
plotRidges(data=bugs.df, bugs=speciesList, where="oakMargin", when="pm", wk=1, caption=Sys.Date())
count(bugs.df!transect)
count(bugs.df$transect)
filter(bugs.df, transect == "oakMargine")
filter(bugs.df, bugs.df$transect == "oakMargine")
filter(bugs.df, bugs.df$transect == "oakMargin")
nrows(filter(bugs.df, bugs.df$transect == "oakMargin"))
nrow(filter(bugs.df, bugs.df$transect == "oakMargin"))
library(dplyr)
plotRidges <- function(data, bugs, where, when, wk, caption) {
# https://cran.r-project.org/web/packages/ggridges/vignettes/introduction.html
print(paste("inside; data= ", colnames(data), sep="\n"))
if (wk < 23 | wk > 52) {  # we definitely don't have a valid week
# this case indicates 'use data from all weeks'
cumulative <- "cumulative"
if (when != "am" & when != "pm") {    # use all the data (am and pm) for each day
filteredBugs.df <- filter(data, transect == where)
} else {                              # use partial data (am or pm) for each day
filteredBugs.df <- filter(data, transect == where & time == when)
}
} else {  #  we might have a 'valid' week (data for the specified week could be
#  missing....)
cumulative <- as.character(wk)
if (when != "am" & when != "pm") {   # use all the data (am and pm) for each day
filteredBugs.df <- filter(data, transect == where & week == wk)
} else {                             # use partial data (am or pm) for each day
filteredBugs.df <- filter(data, transect == where & time == when & week == wk)
}
}
# simplify to include the trap position and the bug in the list
newBugs.df <- subset(filteredBugs.df, select= c("positionX", bugs))
spider_rows <- count(newBugs.df)
trapsWithSpiders <- count(add_count(newBugs.df) %>% filter(spider>0))
percentOcurrance <- (trapsWithSpiders / spider_rows) * 100
# https://stackoverflow.com/questions/3443687/formatting-decimal-places-in-r
percentOcurrance <- format(round(percentOcurrance, 2), nsmall = 2)
spider.list <- newBugs.df$spider   #
newBugs.df$spider <- NULL
#newBugs.df$position <- as.character(position.list)
newBugs.df$spider <- as.factor(spider.list)
#Density plots can be thought of as plots of smoothed histograms.
#The smoothness is controlled by a bandwidth parameter that is analogous
#to the histogram binwidth.
#Most density plots use a kernel density estimate, but there are other
#possible strategies; qualitatively the particular strategy rarely matters.
# https://homepage.divms.uiowa.edu/~luke/classes/STAT4580/histdens.html
#gg2 <- ggplot(newBugs.df,aes(x=positionX, y=spider, fill=spider))+
gg2 <- ggplot(newBugs.df, aes_string(x="positionX", y=bugs[1], fill=bugs[1])) +
geom_density_ridges(
#aes(point_color = spider, point_fill=spider, point_shape=spider),
# https://stackoverflow.com/questions/22309285/how-to-use-a-variable-to-specify-column-name-in-ggplot
aes_string(point_color = bugs[1], point_fill=bugs[1], point_shape=bugs[1]),
alpha = .2, jittered_points = TRUE, show.legend=F) +
scale_point_color_hue(l = 40)  +
scale_discrete_manual(aesthetics = "point_shape", values = c(21, 22, 23, 24, 25)) +
#stat_density_ridges(quantile_lines = TRUE, quantiles = 2, alpha = .2, jittered_points = TRUE) +
xlim(1,10) +
# http://ggplot2.tidyverse.org/reference/sec_axis.html
scale_x_continuous(breaks=seq(4,200,16),
sec.axis = sec_axis(~.*.3048,
breaks= seq(0, 80, 10),
name= "trap distance from row start (m)"))  +
labs(title= paste("Apparent Probability Density, ",
"transect: ", where, sep=""),
subtitle = paste("week: ", cumulative, ", collection time: ", when,
"\ntraps with ", bugs[1], "s: ", percentOcurrance, " %",
sep=""),
x="trap distance from row start (ft)",
y= paste(bugs[1], " counts\nper trap", sep=""),
#caption="10 June 2018")
caption=paste(caption,
"\nhttps://en.wikipedia.org/wiki/Kernel_density_estimation",
sep="")) +
theme(panel.grid.minor=element_blank()) +  # hide the minor gridlines
theme(axis.title.y = element_text(angle = 0, vjust=.5))
# grid.arrange(gg1, gg2, ncol=1, nrow=2)
# ggsave("joy1.png", height=8, width=8, dpi=120, type="cairo-png")
return(gg2)
}
plotRidges(data=bugs.df, bugs=speciesList, where="oakMargin", when="pm", wk=1, caption=Sys.Date())
library(ggplot2)
library(ggridges)
#library(gridExtra)
source.url <- c("https://raw.githubusercontent.com/cordphelps/ampelos/master/bugs.csv")
bugs.df <- read.csv(source.url, header=TRUE, row.names=NULL)
speciesList <- c("spider")
plotRidges(data=bugs.df, bugs=speciesList, where="oakMargin", when="pm", wk=1, caption=Sys.Date())
plotRidges(data=bugs.df, bugs=speciesList, where="control", when="am", wk=1, caption=Sys.Date())
total <- bugCount()
print(total)
library(ggplot2)
library(ggridges)
#library(gridExtra)
source.url <- c("https://raw.githubusercontent.com/cordphelps/ampelos/master/bugs.csv")
bugs.df <- read.csv(source.url, header=TRUE, row.names=NULL)
speciesList <- c("spider")
plotRidges(data=bugs.df, bugs=speciesList, where="oakMargin", when="pm", wk=1, caption=Sys.Date())
plotRidges(data=bugs.df, bugs=speciesList, where="control", when="am", wk=1, caption=Sys.Date())
total <- bugCount()
print(total)
library(ggplot2)
library(ggridges)
#library(gridExtra)
source.url <- c("https://raw.githubusercontent.com/cordphelps/ampelos/master/bugs.csv")
bugs.df <- read.csv(source.url, header=TRUE, row.names=NULL)
speciesList <- c("spider")
plotRidges(data=bugs.df, bugs=speciesList, where="oakMargin", when="pm", wk=1, caption=Sys.Date())
#plotRidges(data=bugs.df, bugs=speciesList, where="control", when="am", wk=1, caption=Sys.Date())
total <- bugCount()
print(total)
sessionInfo()
library(kable)
kable(head(bugs.df), format="latex")
library(knitr)
kable(head(bugs.df), format="latex")
kable(bugsOnly.df, format = "latex", booktabs = T)
kable(bugs.df, format = "latex", booktabs = T)
bugsOnly.df <- bigTable(bugs.df)
bugsOnly.df %>% kable() %>% kable_styling()
colnames(bugsOnly.df)[1] <- "total"
bugsOnly.df <- transmute(bugsOnly.df, new=bugsOnly.df$total*5)
bugsOnly.df <- t(bigTable(bugs.df))
colnames(bugsOnly.df)[1] <- "total"
bugsOnly.df <- mutate(bugsOnly.df, new=bugsOnly.df$total*5)
bugsOnly.df <- mutate(bugsOnly.df, new=total*5)
class(bugsOnly.df)
bugsOnly.df <- t(bigTable(bugs.df))
colnames(bugsOnly.df)[1] <- "total"
# add a new column
bugsOnly.df <- as.dataframe(mutate(bugsOnly.df, new=total*5))
bugsOnly.df <- t(bigTable(bugs.df))
colnames(bugsOnly.df)[1] <- "total"
data.frame(bugsOnly.df)
# add a new column
bugsOnly.df <- as.dataframe(mutate(bugsOnly.df, new=total*5))
bugsOnly.df <- mutate(bugsOnly.df, new=total*5)
bugsOnly.df <- t(bigTable(bugs.df))
colnames(bugsOnly.df)[1] <- "total"
bugsOnly.df <- data.frame(bugsOnly.df)
bugsOnly.df <- mutate(bugsOnly.df, new=total*5)
rownames(bugsOnly.df)
View(bugsOnly.df)
View(bugs.df)
View(bugs.df)
skim(bugs.df)
library(skimr)
skim(bugs.df)
bugsOnly.df <- t(bigTable(bugs.df))
skim(bugsOnly.df)
bugsOnly.df <- data.frame(bugsOnly.df)
skim(bugsOnly.df)
View(bugsOnly.df)
View(bugsOnly.df)
?t
knitr::opts_chunk$set(echo = TRUE)
print(UCANR.df)
source.url <- c("https://raw.githubusercontent.com/cordphelps/ampelos/master/AmpelosBugs.csv")
UCANR.df <- read.csv(source.url, header=FALSE, row.names=NULL)
knitr::opts_chunk$set(echo = TRUE)
source.url <- c("https://raw.githubusercontent.com/cordphelps/ampelos/master/AmpelosBugs.csv")
UCANR.df <- read.csv(source.url, header=FALSE, row.names=NULL)
print(UCANR.df)
kable(UCANR.df, format = "html", booktabs = F, caption= "this is a caption") #
kable(UCANR.df, format = "html", booktabs = F, caption= "this is a caption") %>%
kable_styling(full_width = F)
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
source.url <- c("https://raw.githubusercontent.com/cordphelps/ampelos/master/AmpelosBugs.csv")
UCANR.df <- read.csv(source.url, header=FALSE, row.names=NULL)
print(UCANR.df)
kable(UCANR.df, format = "html", booktabs = F, caption= "this is a caption") %>%
kable_styling(full_width = F)
kable(UCANR.df, format = "html", booktabs = F, caption= "this is a caption")
add_footnote(input, label = NULL, notation = "alphabet",
threeparttable = FALSE, escape = TRUE)n%>%
kable(UCANR.df, format = "html", booktabs = F, caption= "this is a caption")
add_footnote(input, label = NULL, notation = "alphabet",
threeparttable = FALSE, escape = TRUE) %>%
kable_styling(full_width = F)
kable(UCANR.df, format = "html", booktabs = F, caption= "this is a caption") +
add_footnote(input, label = NULL, notation = "alphabet",
threeparttable = FALSE, escape = TRUE) %>%
kable_styling(full_width = F)
kable(UCANR.df, format = "html", booktabs = F, caption= "this is a caption")  %>%
kable_styling(full_width = F) %>%
add_footnote(c("Footnote 1", "Have a good day."), notation = "alphabet")
View(bugs.df)
skim(bugs.df)
install.packages("rlang")
library(rlang)
?sym
source('~/code/thesis/ampelos/bug-library.R')
plotTrend(data=bugs.df, bugs=sym("Honey.Bee"), where=sym("control"), when=sym("pm"), caption=Sys.Date())
source.url <- c("https://raw.githubusercontent.com/cordphelps/ampelos/master/bugs.csv")
bugs.df <- read.csv(source.url, header=TRUE, row.names=NULL)
assign("bugs.df", bugs.df, envir=.GlobalEnv)
plotTrend(data=bugs.df, bugs=sym("Honey.Bee"), where=sym("control"), when=sym("pm"), caption=Sys.Date())
View(bugs.df)
source('~/code/thesis/ampelos/bug-library.R')
plotTrend(data=bugs.df, bugs=sym("Honey.Bee"), where=sym("control"), when=sym("pm"), caption=Sys.Date())
source('~/code/thesis/ampelos/bug-library.R')
plotTrend(data=bugs.df, bugs=sym("Honey.Bee"), where=sym("control"), when=sym("pm"), caption=Sys.Date())
source('~/code/thesis/ampelos/bug-library.R')
plotTrend(data=bugs.df, bugs=sym("Honey.Bee"), where="control", when="pm", caption=Sys.Date())
plotTrend(data=bugs.df, bugs=quo(Honey.Bee), where="control", when="pm", caption=Sys.Date())
source('~/code/thesis/ampelos/bug-library.R')
plotTrend(data=bugs.df, bugs=quo(Honey.Bee), where="control", when="pm", caption=Sys.Date())
source('~/code/thesis/ampelos/bug-library.R')
plotTrend(data=bugs.df, bugs=quo(Honey.Bee), where="control", when="pm", caption=Sys.Date())
source('~/code/thesis/ampelos/bug-library.R')
plotTrend(data=bugs.df, bugs=quo(Honey.Bee), where="control", when="pm", caption=Sys.Date())
source('~/code/thesis/ampelos/bug-library.R')
plotTrend(data=bugs.df, bugs=quo(Honey.Bee), where="control", when="pm", caption=Sys.Date())
source('~/code/thesis/ampelos/bug-library.R')
source('~/code/thesis/ampelos/bug-library.R')
plotTrend(data=bugs.df, bugs=quo(Honey.Bee), where="control", when="pm", caption=Sys.Date())
source('~/code/thesis/ampelos/bug-library.R')
source('~/code/thesis/ampelos/bug-library.R')
plotTrend(data=bugs.df, bugs=quo(Honey.Bee), where="control", when="pm", caption=Sys.Date())
source('~/code/thesis/ampelos/bug-library.R')
plotTrend(data=bugs.df, bugs=quo(Honey.Bee), where="control", when="pm", caption=Sys.Date())
source('~/code/thesis/ampelos/bug-library.R')
plotTrend(data=bugs.df, bugs=quo(Honey.Bee), where="control", when="pm", caption=Sys.Date())
source('~/code/thesis/ampelos/bug-library.R')
plotTrend(data=bugs.df, bugs=quo(Honey.Bee), where="control", when="pm", caption=Sys.Date())
source('~/code/thesis/ampelos/bug-library.R')
plotTrend(data=bugs.df, bugs=quo(Honey.Bee), where="control", when="pm", caption=Sys.Date())
source('~/code/thesis/ampelos/bug-library.R')
plotTrend(data=bugs.df, bugs=quo(Honey.Bee), where="control", when="pm", caption=Sys.Date())
source('~/code/thesis/ampelos/bug-library.R')
plotTrend(data=bugs.df, bugs=quo(Honey.Bee), where="control", when="pm", caption=Sys.Date())
source('~/code/thesis/ampelos/bug-library.R')
plotTrend(data=bugs.df, bugs=quo(Honey.Bee), where="control", when="pm", caption=Sys.Date())
source('~/code/thesis/ampelos/bug-library.R')
source('~/code/thesis/ampelos/bug-library.R')
source('~/code/thesis/ampelos/bug-library.R')
source('~/code/thesis/ampelos/bug-library.R')
source('~/code/thesis/ampelos/bug-library.R')
View(aggregatedBugs.df)
View(aggregatedBugs.df)
source('~/code/thesis/ampelos/bug-library.R')
View(aggregatedBugs.df)
View(aggregatedBugs.df)
week.df <- data %>%
filter( time == "pm",  transect == oakMargin) %>%
group_by( week ) %>%
summarise( oakTotal = sum( !!bugs , na.rm = TRUE ) )
week.df <- data %>%
filter( time == "pm",  transect == "oakMargin") %>%
group_by( week ) %>%
summarise( oakTotal = sum( !!bugs , na.rm = TRUE ) )
temp.df <- data %>%
filter( time == "pm",  transect == "control") %>%
group_by( week ) %>%
summarise( controlTotal = sum( !!bugs , na.rm = TRUE ) )
new.df <- merge(week.df, temp.df)
source('~/code/thesis/ampelos/bug-library.R')
aggregatedBugs.df <- filteredBugs.df %>%
group_by( transect, week ) %>%
filter( time == "pm" ) %>%
summarise( weeklyTotal = sum( !!bugs , na.rm = TRUE ) )
aggregatedBugs.df <- data %>%
group_by( transect, week ) %>%
filter( time == "pm" ) %>%
summarise( weeklyTotal = sum( !!bugs , na.rm = TRUE ) )
week.df <- data %>%
filter( time == "pm",  transect == "oakMargin") %>%
group_by( week ) %>%
summarise( oakTotal = sum( !!bugs , na.rm = TRUE ) )
temp.df <- data %>%
filter( time == "pm",  transect == "control") %>%
group_by( week ) %>%
summarise( controlTotal = sum( !!bugs , na.rm = TRUE ) )
new.df <- merge(week.df, temp.df)
source('~/code/thesis/ampelos/bug-library.R')
source('~/code/thesis/ampelos/bug-library.R')
source('~/code/thesis/ampelos/bug-library.R')
source('~/code/thesis/ampelos/bug-library.R')
source('~/code/thesis/ampelos/bug-library.R')
source('~/code/thesis/ampelos/bug-library.R')
source('~/code/thesis/ampelos/bug-library.R')
source('~/code/thesis/ampelos/bug-library.R')
source('~/code/thesis/ampelos/bug-library.R')
source('~/code/thesis/ampelos/bug-library.R')
source('~/code/thesis/ampelos/bug-library.R')
source('~/code/thesis/ampelos/bug-library.R')
source("./bug-library.R")
source.url <- c("https://raw.githubusercontent.com/cordphelps/ampelos/master/bugs.csv")
bugs.df <- read.csv(source.url, header=TRUE, row.names=NULL)
plotTrend(data=bugs.df, bugs=quo(Honey.Bee), where="control", when="pm", caption=Sys.Date())
source("./bug-library.R")
setwd("./code/thesis/ampelos/")
source("./bug-library.R")
plotTrend(data=bugs.df, bugs=quo(Honey.Bee), where="control", when="pm", caption=Sys.Date())
View(bugs.df)
source('~/code/thesis/ampelos/bug-library.R')
source('~/code/thesis/ampelos/bug-library.R')
plotTrend(data=bugs.df, bugs=quo(Honey.Bee), where="control", when="pm", caption=Sys.Date())
?enquo
source('~/code/thesis/ampelos/bug-library.R')
source('~/code/thesis/ampelos/bug-library.R')
bugs=quo(Honey.Bee)
bugs
enquo(bugs)
source('~/code/thesis/ampelos/bug-library.R')
quo_name(bugs)
source('~/code/thesis/ampelos/bug-library.R')
source('~/code/thesis/ampelos/bug-library.R')
source('~/code/thesis/ampelos/bug-library.R')
source('~/code/thesis/ampelos/bug-library.R')
source('~/code/thesis/ampelos/bug-library.R')
source('~/code/thesis/ampelos/bug-library.R')
